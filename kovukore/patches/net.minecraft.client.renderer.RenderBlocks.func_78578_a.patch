# net.minecraft.client.renderer.RenderBlocks.func_78578_a($1, $2, $3, $4, $5, $6, $7)
{
	this.enableAO = true;
	boolean flag = false;
	float f3 = 0.0F;
	float f4 = 0.0F;
	float f5 = 0.0F;
	float f6 = 0.0F;
	float lc = 1.0F;
	float rc = 1.0F;
	float gc = 1.0F;
	float bc = 1.0F;
	boolean flag1 = true;
	int l = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3, $4);
	net.minecraft.client.renderer.Tessellator tessellator = net.minecraft.client.renderer.Tessellator.instance;
	tessellator.setBrightness(983055);
	if (this.getBlockIcon($1).getIconName().equals("grass_top"))
	{
		flag1 = false;
	}
	else if (this.hasOverrideBlockTexture())
	{
		flag1 = false;
	}
	boolean flag2;
	boolean flag3;
	boolean flag4;
	boolean flag5;
	float f7;
	int i1;
	if (this.renderAllFaces || $1.shouldSideBeRendered(this.blockAccess, $2, $3 - 1, $4, 0))
	{
		if (this.renderMinY <= 0.0D)
		{
			--$3;
		}
		this.aoBrightnessXYNN = $1.getMixedBrightnessForBlock(this.blockAccess, $2 - 1, $3, $4) & 15728880;
		this.aoBrightnessYZNN = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3, $4 - 1) & 15728880;
		this.aoBrightnessYZNP = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3, $4 + 1) & 15728880;
		this.aoBrightnessXYPN = $1.getMixedBrightnessForBlock(this.blockAccess, $2 + 1, $3, $4) & 15728880;
		this.aoLightValueScratchXYNN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 - 1, $3, $4);
		this.aoLightValueScratchYZNN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3, $4 - 1);
		this.aoLightValueScratchYZNP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3, $4 + 1);
		this.aoLightValueScratchXYPN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 + 1, $3, $4);
		flag3 = Block.canBlockGrass[this.blockAccess.getBlockId($2 + 1, $3 - 1, $4)];
		flag2 = Block.canBlockGrass[this.blockAccess.getBlockId($2 - 1, $3 - 1, $4)];
		flag5 = Block.canBlockGrass[this.blockAccess.getBlockId($2, $3 - 1, $4 + 1)];
		flag4 = Block.canBlockGrass[this.blockAccess.getBlockId($2, $3 - 1, $4 - 1)];
		if (!flag4 && !flag2)
		{
			this.aoLightValueScratchXYZNNN = this.aoLightValueScratchXYNN;
			this.aoBrightnessXYZNNN = this.aoBrightnessXYNN;
		}
		else
		{
			this.aoLightValueScratchXYZNNN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 - 1, $3, $4 - 1);
			this.aoBrightnessXYZNNN = $1.getMixedBrightnessForBlock(this.blockAccess, $2 - 1, $3, $4 - 1) & 15728880;
		}
		if (!flag5 && !flag2)
		{
			this.aoLightValueScratchXYZNNP = this.aoLightValueScratchXYNN;
			this.aoBrightnessXYZNNP = this.aoBrightnessXYNN;
		}
		else
		{
			this.aoLightValueScratchXYZNNP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 - 1, $3, $4 + 1);
			this.aoBrightnessXYZNNP = $1.getMixedBrightnessForBlock(this.blockAccess, $2 - 1, $3, $4 + 1) & 15728880;
		}
		if (!flag4 && !flag3)
		{
			this.aoLightValueScratchXYZPNN = this.aoLightValueScratchXYPN;
			this.aoBrightnessXYZPNN = this.aoBrightnessXYPN;
		}
		else
		{
			this.aoLightValueScratchXYZPNN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 + 1, $3, $4 - 1);
			this.aoBrightnessXYZPNN = $1.getMixedBrightnessForBlock(this.blockAccess, $2 + 1, $3, $4 - 1) & 15728880;
		}

		if (!flag5 && !flag3)
		{
			this.aoLightValueScratchXYZPNP = this.aoLightValueScratchXYPN;
			this.aoBrightnessXYZPNP = this.aoBrightnessXYPN;
		}
		else
		{
			this.aoLightValueScratchXYZPNP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 + 1, $3, $4 + 1);
			this.aoBrightnessXYZPNP = $1.getMixedBrightnessForBlock(this.blockAccess, $2 + 1, $3, $4 + 1) & 15728880;
		}
		if (this.renderMinY <= 0.0D)
		{
			++$3;
		}
		i1 = l;
		if (this.renderMinY <= 0.0D || !this.blockAccess.isBlockOpaqueCube($2, $3 - 1, $4))
		{
			i1 = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3 - 1, $4);
			if ((i1 & 1048320) > 0)
			{
				lc = 1f - (i1 & 240) / 240f;
				rc = (i1 & 3840) / 3840f;
				gc = (i1 & 61440) / 61440f;
				bc = (i1 & 983040) / 983040f;

				rc = (rc + lc > 1) ? 1 : rc + lc;
				gc = (gc + lc > 1) ? 1 : gc + lc;
				bc = (bc + lc > 1) ? 1 : bc + lc;
				i1 &= 15728880;
			}

		}
		f7 = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3 - 1, $4);
		f3 = (this.aoLightValueScratchXYZNNP + this.aoLightValueScratchXYNN + this.aoLightValueScratchYZNP + f7) / 4.0F;
		f6 = (this.aoLightValueScratchYZNP + f7 + this.aoLightValueScratchXYZPNP + this.aoLightValueScratchXYPN) / 4.0F;
		f5 = (f7 + this.aoLightValueScratchYZNN + this.aoLightValueScratchXYPN + this.aoLightValueScratchXYZPNN) / 4.0F;
		f4 = (this.aoLightValueScratchXYNN + this.aoLightValueScratchXYZNNN + f7 + this.aoLightValueScratchYZNN) / 4.0F;
		this.brightnessTopLeft = this.getAoBrightness(this.aoBrightnessXYZNNP, this.aoBrightnessXYNN, this.aoBrightnessYZNP, i1);
		this.brightnessTopRight = this.getAoBrightness(this.aoBrightnessYZNP, this.aoBrightnessXYZPNP, this.aoBrightnessXYPN, i1);
		this.brightnessBottomRight = this.getAoBrightness(this.aoBrightnessYZNN, this.aoBrightnessXYPN, this.aoBrightnessXYZPNN, i1);
		this.brightnessBottomLeft = this.getAoBrightness(this.aoBrightnessXYNN, this.aoBrightnessXYZNNN, this.aoBrightnessYZNN, i1);
		if (flag1)
		{
			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = $5 * 0.5F * rc;
			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = $6 * 0.5F * gc;
			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = $7 * 0.5F * bc;
		}
		else
		{
			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = 0.5F * rc;
			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = 0.5F * gc;
			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = 0.5F * bc;
		}
		this.colorRedTopLeft *= f3;
		this.colorGreenTopLeft *= f3;
		this.colorBlueTopLeft *= f3;
		this.colorRedBottomLeft *= f4;
		this.colorGreenBottomLeft *= f4;
		this.colorBlueBottomLeft *= f4;
		this.colorRedBottomRight *= f5;
		this.colorGreenBottomRight *= f5;
		this.colorBlueBottomRight *= f5;
		this.colorRedTopRight *= f6;
		this.colorGreenTopRight *= f6;
		this.colorBlueTopRight *= f6;
		this.renderFaceYNeg($1, (double) $2, (double) $3, (double) $4, this.getBlockIcon($1, this.blockAccess, $2, $3, $4, 0));
		lc = 1.0F;
		rc = 1.0F;
		gc = 1.0F;
		bc = 1.0F;
		flag = true;
	}
	if (this.renderAllFaces || $1.shouldSideBeRendered(this.blockAccess, $2, $3 + 1, $4, 1))
	{
		if (this.renderMaxY >= 1.0D)
		{
			++$3;
		}
		int lightVal = $1.getMixedBrightnessForBlock(this.blockAccess, $2 - 1, $3, $4);
		this.aoBrightnessXYNP = $1.getMixedBrightnessForBlock(this.blockAccess, $2 - 1, $3, $4) & 15728880;
		this.aoBrightnessXYPP = $1.getMixedBrightnessForBlock(this.blockAccess, $2 + 1, $3, $4) & 15728880;
		this.aoBrightnessYZPN = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3, $4 - 1) & 15728880;
		this.aoBrightnessYZPP = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3, $4 + 1) & 15728880;
		this.aoLightValueScratchXYNP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 - 1, $3, $4);
		this.aoLightValueScratchXYPP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 + 1, $3, $4);
		this.aoLightValueScratchYZPN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3, $4 - 1);
		this.aoLightValueScratchYZPP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3, $4 + 1);
		flag3 = Block.canBlockGrass[this.blockAccess.getBlockId($2 + 1, $3 + 1, $4)];
		flag2 = Block.canBlockGrass[this.blockAccess.getBlockId($2 - 1, $3 + 1, $4)];
		flag5 = Block.canBlockGrass[this.blockAccess.getBlockId($2, $3 + 1, $4 + 1)];
		flag4 = Block.canBlockGrass[this.blockAccess.getBlockId($2, $3 + 1, $4 - 1)];
		if (!flag4 && !flag2)
		{
			this.aoLightValueScratchXYZNPN = this.aoLightValueScratchXYNP;
			this.aoBrightnessXYZNPN = this.aoBrightnessXYNP;
		}
		else
		{
			this.aoLightValueScratchXYZNPN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 - 1, $3, $4 - 1);
			this.aoBrightnessXYZNPN = $1.getMixedBrightnessForBlock(this.blockAccess, $2 - 1, $3, $4 - 1) & 15728880;
		}

		if (!flag4 && !flag3)
		{
			this.aoLightValueScratchXYZPPN = this.aoLightValueScratchXYPP;
			this.aoBrightnessXYZPPN = this.aoBrightnessXYPP;
		}
		else
		{
			this.aoLightValueScratchXYZPPN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 + 1, $3, $4 - 1);
			this.aoBrightnessXYZPPN = $1.getMixedBrightnessForBlock(this.blockAccess, $2 + 1, $3, $4 - 1) & 15728880;
		}

		if (!flag5 && !flag2)
		{
			this.aoLightValueScratchXYZNPP = this.aoLightValueScratchXYNP;
			this.aoBrightnessXYZNPP = this.aoBrightnessXYNP;
		}
		else
		{
			this.aoLightValueScratchXYZNPP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 - 1, $3, $4 + 1);
			this.aoBrightnessXYZNPP = $1.getMixedBrightnessForBlock(this.blockAccess, $2 - 1, $3, $4 + 1) & 15728880;
		}

		if (!flag5 && !flag3)
		{
			this.aoLightValueScratchXYZPPP = this.aoLightValueScratchXYPP;
			this.aoBrightnessXYZPPP = this.aoBrightnessXYPP;
		}
		else
		{
			this.aoLightValueScratchXYZPPP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 + 1, $3, $4 + 1);
			this.aoBrightnessXYZPPP = $1.getMixedBrightnessForBlock(this.blockAccess, $2 + 1, $3, $4 + 1) & 15728880;
		}
		if (this.renderMaxY >= 1.0D)
		{
			--$3;
		}
		i1 = l;
		if (this.renderMaxY >= 1.0D || !this.blockAccess.isBlockOpaqueCube($2, $3 + 1, $4))
		{
			i1 = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3 + 1, $4);
			if ((i1 & 1048320) > 0)
			{
				lc = 1f - (i1 & 240) / 240f;
				rc = (i1 & 3840) / 3840f;
				gc = (i1 & 61440) / 61440f;
				bc = (i1 & 983040) / 983040f;
				rc = (rc + lc > 1) ? 1 : rc + lc;
				gc = (gc + lc > 1) ? 1 : gc + lc;
				bc = (bc + lc > 1) ? 1 : bc + lc;
				i1 &= 15728880;
			}
		}
		f7 = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3 + 1, $4);
		f6 = (this.aoLightValueScratchXYZNPP + this.aoLightValueScratchXYNP + this.aoLightValueScratchYZPP + f7) / 4.0F;
		f3 = (this.aoLightValueScratchYZPP + f7 + this.aoLightValueScratchXYZPPP + this.aoLightValueScratchXYPP) / 4.0F;
		f4 = (f7 + this.aoLightValueScratchYZPN + this.aoLightValueScratchXYPP + this.aoLightValueScratchXYZPPN) / 4.0F;
		f5 = (this.aoLightValueScratchXYNP + this.aoLightValueScratchXYZNPN + f7 + this.aoLightValueScratchYZPN) / 4.0F;
		this.brightnessTopRight = this.getAoBrightness(this.aoBrightnessXYZNPP, this.aoBrightnessXYNP, this.aoBrightnessYZPP, i1);
		this.brightnessTopLeft = this.getAoBrightness(this.aoBrightnessYZPP, this.aoBrightnessXYZPPP, this.aoBrightnessXYPP, i1);
		this.brightnessBottomLeft = this.getAoBrightness(this.aoBrightnessYZPN, this.aoBrightnessXYPP, this.aoBrightnessXYZPPN, i1);
		this.brightnessBottomRight = this.getAoBrightness(this.aoBrightnessXYNP, this.aoBrightnessXYZNPN, this.aoBrightnessYZPN, i1);
		this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = $5 * rc;
		this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = $6 * gc;
		this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = $7 * bc;
		this.colorRedTopLeft *= f3;
		this.colorGreenTopLeft *= f3;
		this.colorBlueTopLeft *= f3;
		this.colorRedBottomLeft *= f4;
		this.colorGreenBottomLeft *= f4;
		this.colorBlueBottomLeft *= f4;
		this.colorRedBottomRight *= f5;
		this.colorGreenBottomRight *= f5;
		this.colorBlueBottomRight *= f5;
		this.colorRedTopRight *= f6;
		this.colorGreenTopRight *= f6;
		this.colorBlueTopRight *= f6;
		this.renderFaceYPos($1, (double) $2, (double) $3, (double) $4, this.getBlockIcon($1, this.blockAccess, $2, $3, $4, 1));
		lc = 1.0F;
		rc = 1.0F;
		gc = 1.0F;
		bc = 1.0F;
		flag = true;
	}
	net.minecraft.util.Icon icon;
	if (this.renderAllFaces || $1.shouldSideBeRendered(this.blockAccess, $2, $3, $4 - 1, 2))
	{
		if (this.renderMinZ <= 0.0D)
		{
			--$4;
		}
		this.aoLightValueScratchXZNN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 - 1, $3, $4);
		this.aoLightValueScratchYZNN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3 - 1, $4);
		this.aoLightValueScratchYZPN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3 + 1, $4);
		this.aoLightValueScratchXZPN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 + 1, $3, $4);
		this.aoBrightnessXZNN = $1.getMixedBrightnessForBlock(this.blockAccess, $2 - 1, $3, $4) & 15728880;
		this.aoBrightnessYZNN = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3 - 1, $4) & 15728880;
		this.aoBrightnessYZPN = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3 + 1, $4) & 15728880;
		this.aoBrightnessXZPN = $1.getMixedBrightnessForBlock(this.blockAccess, $2 + 1, $3, $4) & 15728880;
		flag3 = Block.canBlockGrass[this.blockAccess.getBlockId($2 + 1, $3, $4 - 1)];
		flag2 = Block.canBlockGrass[this.blockAccess.getBlockId($2 - 1, $3, $4 - 1)];
		flag5 = Block.canBlockGrass[this.blockAccess.getBlockId($2, $3 + 1, $4 - 1)];
		flag4 = Block.canBlockGrass[this.blockAccess.getBlockId($2, $3 - 1, $4 - 1)];
		if (!flag2 && !flag4)
		{
			this.aoLightValueScratchXYZNNN = this.aoLightValueScratchXZNN;
			this.aoBrightnessXYZNNN = this.aoBrightnessXZNN;
		}
		else
		{
			this.aoLightValueScratchXYZNNN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 - 1, $3 - 1, $4);
			this.aoBrightnessXYZNNN = $1.getMixedBrightnessForBlock(this.blockAccess, $2 - 1, $3 - 1, $4) & 15728880;
		}
		if (!flag2 && !flag5)
		{
			this.aoLightValueScratchXYZNPN = this.aoLightValueScratchXZNN;
			this.aoBrightnessXYZNPN = this.aoBrightnessXZNN;
		}
		else
		{
			this.aoLightValueScratchXYZNPN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 - 1, $3 + 1, $4);
			this.aoBrightnessXYZNPN = $1.getMixedBrightnessForBlock(this.blockAccess, $2 - 1, $3 + 1, $4) & 15728880;
		}
		if (!flag3 && !flag4)
		{
			this.aoLightValueScratchXYZPNN = this.aoLightValueScratchXZPN;
			this.aoBrightnessXYZPNN = this.aoBrightnessXZPN;
		}
		else
		{
			this.aoLightValueScratchXYZPNN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 + 1, $3 - 1, $4);
			this.aoBrightnessXYZPNN = $1.getMixedBrightnessForBlock(this.blockAccess, $2 + 1, $3 - 1, $4) & 15728880;
		}
		if (!flag3 && !flag5)
		{
			this.aoLightValueScratchXYZPPN = this.aoLightValueScratchXZPN;
			this.aoBrightnessXYZPPN = this.aoBrightnessXZPN;
		}
		else
		{
			this.aoLightValueScratchXYZPPN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 + 1, $3 + 1, $4);
			this.aoBrightnessXYZPPN = $1.getMixedBrightnessForBlock(this.blockAccess, $2 + 1, $3 + 1, $4) & 15728880;
		}
		if (this.renderMinZ <= 0.0D)
		{
			++$4;
		}
		i1 = l;
		if (this.renderMinZ <= 0.0D || !this.blockAccess.isBlockOpaqueCube($2, $3, $4 - 1))
		{
			i1 = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3, $4 - 1);
			if ((i1 & 1048320) > 0)
			{
				lc = 1f - (i1 & 240) / 240f;
				rc = (i1 & 3840) / 3840f;
				gc = (i1 & 61440) / 61440f;
				bc = (i1 & 983040) / 983040f;

				rc = (rc + lc > 1) ? 1 : rc + lc;
				gc = (gc + lc > 1) ? 1 : gc + lc;
				bc = (bc + lc > 1) ? 1 : bc + lc;
				i1 &= 15728880;
			}
		}
		f7 = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3, $4 - 1);
		f3 = (this.aoLightValueScratchXZNN + this.aoLightValueScratchXYZNPN + f7 + this.aoLightValueScratchYZPN) / 4.0F;
		f4 = (f7 + this.aoLightValueScratchYZPN + this.aoLightValueScratchXZPN + this.aoLightValueScratchXYZPPN) / 4.0F;
		f5 = (this.aoLightValueScratchYZNN + f7 + this.aoLightValueScratchXYZPNN + this.aoLightValueScratchXZPN) / 4.0F;
		f6 = (this.aoLightValueScratchXYZNNN + this.aoLightValueScratchXZNN + this.aoLightValueScratchYZNN + f7) / 4.0F;
		this.brightnessTopLeft = this.getAoBrightness(this.aoBrightnessXZNN, this.aoBrightnessXYZNPN, this.aoBrightnessYZPN, i1);
		this.brightnessBottomLeft = this.getAoBrightness(this.aoBrightnessYZPN, this.aoBrightnessXZPN, this.aoBrightnessXYZPPN, i1);
		this.brightnessBottomRight = this.getAoBrightness(this.aoBrightnessYZNN, this.aoBrightnessXYZPNN, this.aoBrightnessXZPN, i1);
		this.brightnessTopRight = this.getAoBrightness(this.aoBrightnessXYZNNN, this.aoBrightnessXZNN, this.aoBrightnessYZNN, i1);
		if (flag1)
		{
			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = $5 * 0.8F * rc;
			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = $6 * 0.8F * gc;
			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = $7 * 0.8F * bc;
		}
		else
		{
			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = 0.8F * rc;
			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = 0.8F * gc;
			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = 0.8F * bc;
		}
		this.colorRedTopLeft *= f3;
		this.colorGreenTopLeft *= f3;
		this.colorBlueTopLeft *= f3;
		this.colorRedBottomLeft *= f4;
		this.colorGreenBottomLeft *= f4;
		this.colorBlueBottomLeft *= f4;
		this.colorRedBottomRight *= f5;
		this.colorGreenBottomRight *= f5;
		this.colorBlueBottomRight *= f5;
		this.colorRedTopRight *= f6;
		this.colorGreenTopRight *= f6;
		this.colorBlueTopRight *= f6;
		icon = this.getBlockIcon($1, this.blockAccess, $2, $3, $4, 2);
		this.renderFaceZNeg($1, (double) $2, (double) $3, (double) $4, icon);
		if (fancyGrass && icon.getIconName().equals("grass_side") && !this.hasOverrideBlockTexture())
		{
			this.colorRedTopLeft *= $5;
			this.colorRedBottomLeft *= $5;
			this.colorRedBottomRight *= $5;
			this.colorRedTopRight *= $5;
			this.colorGreenTopLeft *= $6;
			this.colorGreenBottomLeft *= $6;
			this.colorGreenBottomRight *= $6;
			this.colorGreenTopRight *= $6;
			this.colorBlueTopLeft *= $7;
			this.colorBlueBottomLeft *= $7;
			this.colorBlueBottomRight *= $7;
			this.colorBlueTopRight *= $7;
			this.renderFaceZNeg($1, (double) $2, (double) $3, (double) $4, BlockGrass.getIconSideOverlay());
		}
		lc = 1.0F;
		rc = 1.0F;
		gc = 1.0F;
		bc = 1.0F;
		flag = true;
	}
	if (this.renderAllFaces || $1.shouldSideBeRendered(this.blockAccess, $2, $3, $4 + 1, 3))
	{
		if (this.renderMaxZ >= 1.0D)
		{
			++$4;
		}
		this.aoLightValueScratchXZNP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 - 1, $3, $4);
		this.aoLightValueScratchXZPP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 + 1, $3, $4);
		this.aoLightValueScratchYZNP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3 - 1, $4);
		this.aoLightValueScratchYZPP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3 + 1, $4);
		this.aoBrightnessXZNP = $1.getMixedBrightnessForBlock(this.blockAccess, $2 - 1, $3, $4) & 15728880;
		this.aoBrightnessXZPP = $1.getMixedBrightnessForBlock(this.blockAccess, $2 + 1, $3, $4) & 15728880;
		this.aoBrightnessYZNP = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3 - 1, $4) & 15728880;
		this.aoBrightnessYZPP = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3 + 1, $4) & 15728880;
		flag3 = Block.canBlockGrass[this.blockAccess.getBlockId($2 + 1, $3, $4 + 1)];
		flag2 = Block.canBlockGrass[this.blockAccess.getBlockId($2 - 1, $3, $4 + 1)];
		flag5 = Block.canBlockGrass[this.blockAccess.getBlockId($2, $3 + 1, $4 + 1)];
		flag4 = Block.canBlockGrass[this.blockAccess.getBlockId($2, $3 - 1, $4 + 1)];
		if (!flag2 && !flag4)
		{
			this.aoLightValueScratchXYZNNP = this.aoLightValueScratchXZNP;
			this.aoBrightnessXYZNNP = this.aoBrightnessXZNP;
		}
		else
		{
			this.aoLightValueScratchXYZNNP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 - 1, $3 - 1, $4);
			this.aoBrightnessXYZNNP = $1.getMixedBrightnessForBlock(this.blockAccess, $2 - 1, $3 - 1, $4) & 15728880;
		}
		if (!flag2 && !flag5)
		{
			this.aoLightValueScratchXYZNPP = this.aoLightValueScratchXZNP;
			this.aoBrightnessXYZNPP = this.aoBrightnessXZNP;
		}
		else
		{
			this.aoLightValueScratchXYZNPP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 - 1, $3 + 1, $4);
			this.aoBrightnessXYZNPP = $1.getMixedBrightnessForBlock(this.blockAccess, $2 - 1, $3 + 1, $4) & 15728880;
		}
		if (!flag3 && !flag4)
		{
			this.aoLightValueScratchXYZPNP = this.aoLightValueScratchXZPP;
			this.aoBrightnessXYZPNP = this.aoBrightnessXZPP;
		}
		else
		{
			this.aoLightValueScratchXYZPNP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 + 1, $3 - 1, $4);
			this.aoBrightnessXYZPNP = $1.getMixedBrightnessForBlock(this.blockAccess, $2 + 1, $3 - 1, $4) & 15728880;
		}
		if (!flag3 && !flag5)
		{
			this.aoLightValueScratchXYZPPP = this.aoLightValueScratchXZPP;
			this.aoBrightnessXYZPPP = this.aoBrightnessXZPP;
		}
		else
		{
			this.aoLightValueScratchXYZPPP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 + 1, $3 + 1, $4);
			this.aoBrightnessXYZPPP = $1.getMixedBrightnessForBlock(this.blockAccess, $2 + 1, $3 + 1, $4) & 15728880;
		}
		if (this.renderMaxZ >= 1.0D)
		{
			--$4;
		}
		i1 = l;
		if (this.renderMaxZ >= 1.0D || !this.blockAccess.isBlockOpaqueCube($2, $3, $4 + 1))
		{
			i1 = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3, $4 + 1);
			if ((i1 & 1048320) > 0)
			{
				lc = 1f - (i1 & 240) / 240f;
				rc = (i1 & 3840) / 3840f;
				gc = (i1 & 61440) / 61440f;
				bc = (i1 & 983040) / 983040f;
				rc = (rc + lc > 1) ? 1 : rc + lc;
				gc = (gc + lc > 1) ? 1 : gc + lc;
				bc = (bc + lc > 1) ? 1 : bc + lc;
				i1 &= 15728880;
			}
		}
		f7 = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3, $4 + 1);
		f3 = (this.aoLightValueScratchXZNP + this.aoLightValueScratchXYZNPP + f7 + this.aoLightValueScratchYZPP) / 4.0F;
		f6 = (f7 + this.aoLightValueScratchYZPP + this.aoLightValueScratchXZPP + this.aoLightValueScratchXYZPPP) / 4.0F;
		f5 = (this.aoLightValueScratchYZNP + f7 + this.aoLightValueScratchXYZPNP + this.aoLightValueScratchXZPP) / 4.0F;
		f4 = (this.aoLightValueScratchXYZNNP + this.aoLightValueScratchXZNP + this.aoLightValueScratchYZNP + f7) / 4.0F;
		this.brightnessTopLeft = this.getAoBrightness(this.aoBrightnessXZNP, this.aoBrightnessXYZNPP, this.aoBrightnessYZPP, i1);
		this.brightnessTopRight = this.getAoBrightness(this.aoBrightnessYZPP, this.aoBrightnessXZPP, this.aoBrightnessXYZPPP, i1);
		this.brightnessBottomRight = this.getAoBrightness(this.aoBrightnessYZNP, this.aoBrightnessXYZPNP, this.aoBrightnessXZPP, i1);
		this.brightnessBottomLeft = this.getAoBrightness(this.aoBrightnessXYZNNP, this.aoBrightnessXZNP, this.aoBrightnessYZNP, i1);
		if (flag1)
		{
			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = $5 * 0.8F * rc;
			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = $6 * 0.8F * gc;
			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = $7 * 0.8F * bc;
		}
		else
		{
			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = 0.8F * rc;
			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = 0.8F * gc;
			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = 0.8F * bc;
		}
		this.colorRedTopLeft *= f3;
		this.colorGreenTopLeft *= f3;
		this.colorBlueTopLeft *= f3;
		this.colorRedBottomLeft *= f4;
		this.colorGreenBottomLeft *= f4;
		this.colorBlueBottomLeft *= f4;
		this.colorRedBottomRight *= f5;
		this.colorGreenBottomRight *= f5;
		this.colorBlueBottomRight *= f5;
		this.colorRedTopRight *= f6;
		this.colorGreenTopRight *= f6;
		this.colorBlueTopRight *= f6;
		icon = this.getBlockIcon($1, this.blockAccess, $2, $3, $4, 3);
		this.renderFaceZPos($1, (double) $2, (double) $3, (double) $4, this.getBlockIcon($1, this.blockAccess, $2, $3, $4, 3));
		if (fancyGrass && icon.getIconName().equals("grass_side") && !this.hasOverrideBlockTexture())
		{
			this.colorRedTopLeft *= $5;
			this.colorRedBottomLeft *= $5;
			this.colorRedBottomRight *= $5;
			this.colorRedTopRight *= $5;
			this.colorGreenTopLeft *= $6;
			this.colorGreenBottomLeft *= $6;
			this.colorGreenBottomRight *= $6;
			this.colorGreenTopRight *= $6;
			this.colorBlueTopLeft *= $7;
			this.colorBlueBottomLeft *= $7;
			this.colorBlueBottomRight *= $7;
			this.colorBlueTopRight *= $7;
			this.renderFaceZPos($1, (double) $2, (double) $3, (double) $4, BlockGrass.getIconSideOverlay());
		}
		lc = 1.0F;
		rc = 1.0F;
		gc = 1.0F;
		bc = 1.0F;
		flag = true;
	}
	if (this.renderAllFaces || $1.shouldSideBeRendered(this.blockAccess, $2 - 1, $3, $4, 4))
	{
		if (this.renderMinX <= 0.0D)
		{
			--$2;
		}
		this.aoLightValueScratchXYNN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3 - 1, $4);
		this.aoLightValueScratchXZNN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3, $4 - 1);
		this.aoLightValueScratchXZNP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3, $4 + 1);
		this.aoLightValueScratchXYNP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3 + 1, $4);
		this.aoBrightnessXYNN = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3 - 1, $4) & 15728880;
		this.aoBrightnessXZNN = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3, $4 - 1) & 15728880;
		this.aoBrightnessXZNP = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3, $4 + 1) & 15728880;
		this.aoBrightnessXYNP = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3 + 1, $4) & 15728880;
		flag3 = Block.canBlockGrass[this.blockAccess.getBlockId($2 - 1, $3 + 1, $4)];
		flag2 = Block.canBlockGrass[this.blockAccess.getBlockId($2 - 1, $3 - 1, $4)];
		flag5 = Block.canBlockGrass[this.blockAccess.getBlockId($2 - 1, $3, $4 - 1)];
		flag4 = Block.canBlockGrass[this.blockAccess.getBlockId($2 - 1, $3, $4 + 1)];
		if (!flag5 && !flag2)
		{
			this.aoLightValueScratchXYZNNN = this.aoLightValueScratchXZNN;
			this.aoBrightnessXYZNNN = this.aoBrightnessXZNN;
		}
		else
		{
			this.aoLightValueScratchXYZNNN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3 - 1, $4 - 1);
			this.aoBrightnessXYZNNN = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3 - 1, $4 - 1) & 15728880;
		}
		if (!flag4 && !flag2)
		{
			this.aoLightValueScratchXYZNNP = this.aoLightValueScratchXZNP;
			this.aoBrightnessXYZNNP = this.aoBrightnessXZNP;
		}
		else
		{
			this.aoLightValueScratchXYZNNP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3 - 1, $4 + 1);
			this.aoBrightnessXYZNNP = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3 - 1, $4 + 1) & 15728880;
		}
		if (!flag5 && !flag3)
		{
			this.aoLightValueScratchXYZNPN = this.aoLightValueScratchXZNN;
			this.aoBrightnessXYZNPN = this.aoBrightnessXZNN;
		}
		else
		{
			this.aoLightValueScratchXYZNPN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3 + 1, $4 - 1);
			this.aoBrightnessXYZNPN = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3 + 1, $4 - 1) & 15728880;
		}
		if (!flag4 && !flag3)
		{
			this.aoLightValueScratchXYZNPP = this.aoLightValueScratchXZNP;
			this.aoBrightnessXYZNPP = this.aoBrightnessXZNP;
		}
		else
		{
			this.aoLightValueScratchXYZNPP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3 + 1, $4 + 1);
			this.aoBrightnessXYZNPP = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3 + 1, $4 + 1) & 15728880;
		}
		if (this.renderMinX <= 0.0D)
		{
			++$2;
		}
		i1 = l;
		if (this.renderMinX <= 0.0D || !this.blockAccess.isBlockOpaqueCube($2 - 1, $3, $4))
		{
			i1 = $1.getMixedBrightnessForBlock(this.blockAccess, $2 - 1, $3, $4) & 15728880;
			if ((i1 & 1048320) > 0)
			{
				lc = 1f - (i1 & 240) / 240f;
				rc = (i1 & 3840) / 3840f;
				gc = (i1 & 61440) / 61440f;
				bc = (i1 & 983040) / 983040f;
				rc = (rc + lc > 1) ? 1 : rc + lc;
				gc = (gc + lc > 1) ? 1 : gc + lc;
				bc = (bc + lc > 1) ? 1 : bc + lc;
				i1 &= 15728880;
			}
		}
		f7 = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 - 1, $3, $4);
		f6 = (this.aoLightValueScratchXYNN + this.aoLightValueScratchXYZNNP + f7 + this.aoLightValueScratchXZNP) / 4.0F;
		f3 = (f7 + this.aoLightValueScratchXZNP + this.aoLightValueScratchXYNP + this.aoLightValueScratchXYZNPP) / 4.0F;
		f4 = (this.aoLightValueScratchXZNN + f7 + this.aoLightValueScratchXYZNPN + this.aoLightValueScratchXYNP) / 4.0F;
		f5 = (this.aoLightValueScratchXYZNNN + this.aoLightValueScratchXYNN + this.aoLightValueScratchXZNN + f7) / 4.0F;
		this.brightnessTopRight = this.getAoBrightness(this.aoBrightnessXYNN, this.aoBrightnessXYZNNP, this.aoBrightnessXZNP, i1);
		this.brightnessTopLeft = this.getAoBrightness(this.aoBrightnessXZNP, this.aoBrightnessXYNP, this.aoBrightnessXYZNPP, i1);
		this.brightnessBottomLeft = this.getAoBrightness(this.aoBrightnessXZNN, this.aoBrightnessXYZNPN, this.aoBrightnessXYNP, i1);
		this.brightnessBottomRight = this.getAoBrightness(this.aoBrightnessXYZNNN, this.aoBrightnessXYNN, this.aoBrightnessXZNN, i1);
		if (flag1)
		{
			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = $5 * 0.6F * rc;
			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = $6 * 0.6F * gc;
			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = $7 * 0.6F * bc;
		}
		else
		{
			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = 0.6F * rc;
			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = 0.6F * gc;
			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = 0.6F * bc;
		}
		this.colorRedTopLeft *= f3;
		this.colorGreenTopLeft *= f3;
		this.colorBlueTopLeft *= f3;
		this.colorRedBottomLeft *= f4;
		this.colorGreenBottomLeft *= f4;
		this.colorBlueBottomLeft *= f4;
		this.colorRedBottomRight *= f5;
		this.colorGreenBottomRight *= f5;
		this.colorBlueBottomRight *= f5;
		this.colorRedTopRight *= f6;
		this.colorGreenTopRight *= f6;
		this.colorBlueTopRight *= f6;
		icon = this.getBlockIcon($1, this.blockAccess, $2, $3, $4, 4);
		this.renderFaceXNeg($1, (double) $2, (double) $3, (double) $4, icon);
		if (fancyGrass && icon.getIconName().equals("grass_side") && !this.hasOverrideBlockTexture())
		{
			this.colorRedTopLeft *= $5;
			this.colorRedBottomLeft *= $5;
			this.colorRedBottomRight *= $5;
			this.colorRedTopRight *= $5;
			this.colorGreenTopLeft *= $6;
			this.colorGreenBottomLeft *= $6;
			this.colorGreenBottomRight *= $6;
			this.colorGreenTopRight *= $6;
			this.colorBlueTopLeft *= $7;
			this.colorBlueBottomLeft *= $7;
			this.colorBlueBottomRight *= $7;
			this.colorBlueTopRight *= $7;
			this.renderFaceXNeg($1, (double) $2, (double) $3, (double) $4, BlockGrass.getIconSideOverlay());
		}
		lc = 1.0F;
		rc = 1.0F;
		gc = 1.0F;
		bc = 1.0F;
		flag = true;
	}
	if (this.renderAllFaces || $1.shouldSideBeRendered(this.blockAccess, $2 + 1, $3, $4, 5))
	{
		if (this.renderMaxX >= 1.0D)
		{
			++$2;
		}
		this.aoLightValueScratchXYPN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3 - 1, $4);
		this.aoLightValueScratchXZPN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3, $4 - 1);
		this.aoLightValueScratchXZPP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3, $4 + 1);
		this.aoLightValueScratchXYPP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3 + 1, $4);
		this.aoBrightnessXYPN = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3 - 1, $4) & 15728880;
		this.aoBrightnessXZPN = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3, $4 - 1) & 15728880;
		this.aoBrightnessXZPP = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3, $4 + 1) & 15728880;
		this.aoBrightnessXYPP = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3 + 1, $4) & 15728880;
		flag3 = Block.canBlockGrass[this.blockAccess.getBlockId($2 + 1, $3 + 1, $4)];
		flag2 = Block.canBlockGrass[this.blockAccess.getBlockId($2 + 1, $3 - 1, $4)];
		flag5 = Block.canBlockGrass[this.blockAccess.getBlockId($2 + 1, $3, $4 + 1)];
		flag4 = Block.canBlockGrass[this.blockAccess.getBlockId($2 + 1, $3, $4 - 1)];
		if (!flag2 && !flag4)
		{
			this.aoLightValueScratchXYZPNN = this.aoLightValueScratchXZPN;
			this.aoBrightnessXYZPNN = this.aoBrightnessXZPN;
		}
		else
		{
			this.aoLightValueScratchXYZPNN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3 - 1, $4 - 1);
			this.aoBrightnessXYZPNN = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3 - 1, $4 - 1) & 15728880;
		}

		if (!flag2 && !flag5)
		{
			this.aoLightValueScratchXYZPNP = this.aoLightValueScratchXZPP;
			this.aoBrightnessXYZPNP = this.aoBrightnessXZPP;
		}
		else
		{
			this.aoLightValueScratchXYZPNP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3 - 1, $4 + 1);
			this.aoBrightnessXYZPNP = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3 - 1, $4 + 1) & 15728880;
		}

		if (!flag3 && !flag4)
		{
			this.aoLightValueScratchXYZPPN = this.aoLightValueScratchXZPN;
			this.aoBrightnessXYZPPN = this.aoBrightnessXZPN;
		}
		else
		{
			this.aoLightValueScratchXYZPPN = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3 + 1, $4 - 1);
			this.aoBrightnessXYZPPN = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3 + 1, $4 - 1) & 15728880;
		}

		if (!flag3 && !flag5)
		{
			this.aoLightValueScratchXYZPPP = this.aoLightValueScratchXZPP;
			this.aoBrightnessXYZPPP = this.aoBrightnessXZPP;
		}
		else
		{
			this.aoLightValueScratchXYZPPP = $1.getAmbientOcclusionLightValue(this.blockAccess, $2, $3 + 1, $4 + 1);
			this.aoBrightnessXYZPPP = $1.getMixedBrightnessForBlock(this.blockAccess, $2, $3 + 1, $4 + 1) & 15728880;
		}
		if (this.renderMaxX >= 1.0D)
		{
			--$2;
		}
		i1 = l;
		if (this.renderMaxX >= 1.0D || !this.blockAccess.isBlockOpaqueCube($2 + 1, $3, $4))
		{
			i1 = $1.getMixedBrightnessForBlock(this.blockAccess, $2 + 1, $3, $4);
			if ((i1 & 1048320) > 0)
			{
				lc = 1f - (i1 & 240) / 240f;
				rc = (i1 & 3840) / 3840f;
				gc = (i1 & 61440) / 61440f;
				bc = (i1 & 983040) / 983040f;
				rc = (rc + lc > 1) ? 1 : rc + lc;
				gc = (gc + lc > 1) ? 1 : gc + lc;
				bc = (bc + lc > 1) ? 1 : bc + lc;
				i1 &= 15728880;
			}
		}
		f7 = $1.getAmbientOcclusionLightValue(this.blockAccess, $2 + 1, $3, $4);
		f3 = (this.aoLightValueScratchXYPN + this.aoLightValueScratchXYZPNP + f7 + this.aoLightValueScratchXZPP) / 4.0F;
		f4 = (this.aoLightValueScratchXYZPNN + this.aoLightValueScratchXYPN + this.aoLightValueScratchXZPN + f7) / 4.0F;
		f5 = (this.aoLightValueScratchXZPN + f7 + this.aoLightValueScratchXYZPPN + this.aoLightValueScratchXYPP) / 4.0F;
		f6 = (f7 + this.aoLightValueScratchXZPP + this.aoLightValueScratchXYPP + this.aoLightValueScratchXYZPPP) / 4.0F;
		this.brightnessTopLeft = this.getAoBrightness(this.aoBrightnessXYPN, this.aoBrightnessXYZPNP, this.aoBrightnessXZPP, i1);
		this.brightnessTopRight = this.getAoBrightness(this.aoBrightnessXZPP, this.aoBrightnessXYPP, this.aoBrightnessXYZPPP, i1);
		this.brightnessBottomRight = this.getAoBrightness(this.aoBrightnessXZPN, this.aoBrightnessXYZPPN, this.aoBrightnessXYPP, i1);
		this.brightnessBottomLeft = this.getAoBrightness(this.aoBrightnessXYZPNN, this.aoBrightnessXYPN, this.aoBrightnessXZPN, i1);
		if (flag1)
		{
			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = $5 * 0.6F * rc;
			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = $6 * 0.6F * gc;
			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = $7 * 0.6F * bc;
		}
		else
		{
			this.colorRedTopLeft = this.colorRedBottomLeft = this.colorRedBottomRight = this.colorRedTopRight = 0.6F * rc;
			this.colorGreenTopLeft = this.colorGreenBottomLeft = this.colorGreenBottomRight = this.colorGreenTopRight = 0.6F * gc;
			this.colorBlueTopLeft = this.colorBlueBottomLeft = this.colorBlueBottomRight = this.colorBlueTopRight = 0.6F * bc;
		}
		this.colorRedTopLeft *= f3;
		this.colorGreenTopLeft *= f3;
		this.colorBlueTopLeft *= f3;
		this.colorRedBottomLeft *= f4;
		this.colorGreenBottomLeft *= f4;
		this.colorBlueBottomLeft *= f4;
		this.colorRedBottomRight *= f5;
		this.colorGreenBottomRight *= f5;
		this.colorBlueBottomRight *= f5;
		this.colorRedTopRight *= f6;
		this.colorGreenTopRight *= f6;
		this.colorBlueTopRight *= f6;
		icon = this.getBlockIcon($1, this.blockAccess, $2, $3, $4, 5);
		this.renderFaceXPos($1, (double) $2, (double) $3, (double) $4, icon);
		if (fancyGrass && icon.getIconName().equals("grass_side") && !this.hasOverrideBlockTexture())
		{
			this.colorRedTopLeft *= $5;
			this.colorRedBottomLeft *= $5;
			this.colorRedBottomRight *= $5;
			this.colorRedTopRight *= $5;
			this.colorGreenTopLeft *= $6;
			this.colorGreenBottomLeft *= $6;
			this.colorGreenBottomRight *= $6;
			this.colorGreenTopRight *= $6;
			this.colorBlueTopLeft *= $7;
			this.colorBlueBottomLeft *= $7;
			this.colorBlueBottomRight *= $7;
			this.colorBlueTopRight *= $7;
			this.renderFaceXPos($1, (double) $2, (double) $3, (double) $4, BlockGrass.getIconSideOverlay());
		}
		lc = 1.0F;
		rc = 1.0F;
		gc = 1.0F;
		bc = 1.0F;
		flag = true;
	}
	this.enableAO = false;
	return flag;
}
